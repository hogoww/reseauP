#include <sys/socket.h>
#include <string.h>
#include <errno.h>
#include <sys/types.h>
#include <stdlib.h>
#include <stdio.h>
#include <netinet/ip.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <unistd.h>


#define SIZE_BUFF 4096

/* gcc -Wall -ansi -pedantic -std=c99 -o client client.c*/


int main(int argc,char** argv){
  if(argc!=4){
    fprintf(stderr,"usage : ./main adresse port fileName\n");
    exit(EXIT_FAILURE);
  }
  

  int sock=socket(PF_INET,SOCK_STREAM,0);
  int checkReturn;

  struct sockaddr_in addr;
  memset(&addr,0,sizeof(addr));
  addr.sin_family=AF_INET;
  checkReturn=inet_pton(AF_INET,argv[1],&(addr.sin_addr));
  if (checkReturn == 0){
    fprintf(stderr, "Adresse fournie format incorrect");
    close(sock);
      
    exit(EXIT_FAILURE);
  }
  addr.sin_port=htons(atoi(argv[2]));
  
  
  int descSocket=connect(sock,(struct sockaddr*)&addr,sizeof(struct sockaddr));
  if(-1==descSocket){
    fprintf(stderr,"problème connect : %s.\n",strerror(errno));
    close(sock);
    close(descSocket);
    exit(EXIT_FAILURE);
  }
  
  FILE* fileToSend=fopen(argv[3],"r");
  if(fileToSend==NULL){
    fprintf(stderr,"file failed to open : %s.\n",strerror(errno));
    close(sock);
    close(descSocket);
    exit(EXIT_FAILURE);
  }
  /* struct stat s; */
  /* checkReturn=stat(argv[3],&s); */
  /* s.st_size*/

  char c;
  int i;
  char* buffer=NULL;
  buffer=malloc(sizeof(char)*SIZE_BUFF); 

  int len=0;
  while(argv[len]!='\0'){len++;}

  ssize_t res=send(sock,argv[3],len,0);
  if(-1==res){
    fprintf(stderr,"problème sendName : %s.\n",strerror(errno));
    close(sock);
    close(descSocket);
    free(buffer);
    fclose(fileToSend);
    exit(EXIT_FAILURE);
  }

  
  while(1){
    i=0;
    while(i<SIZE_BUFF && EOF!=(c=fgetc(fileToSend))){
      buffer[i]=c;
      i++;
    }

    if(c==EOF){//to avoid stupid complication I'm assuming i won't ever send |something|mod4096==0.
      buffer[i]='\0';
      i++;
    }

    ssize_t res=send(sock,buffer,i,0);
    if(-1==res){
      fprintf(stderr,"problème send : %s.\n",strerror(errno));
      close(sock);
      close(descSocket);
      free(buffer);
      fclose(fileToSend);
      exit(EXIT_FAILURE);
    }
    if(c==EOF){
      break;
    }
  }
  
  close(sock);
  close(descSocket);
  free(buffer);
  fclose(fileToSend);
  return 0;
}
